diff --git a/KernelSU/kernel/ksu.c b/KernelSU/kernel/ksu.c
--- a/KernelSU/kernel/ksu.c
+++ b/KernelSU/kernel/ksu.c
@@ -132,4 +132,5 @@
 #include <linux/version.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 0, 0)
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(5, 0, 0)
 MODULE_IMPORT_NS(VFS_internal_I_am_really_a_filesystem_and_am_NOT_a_driver);
 #endif
diff --git a/KernelSU/kernel/core_hook.c b/KernelSU/kernel/core_hook.c
--- a/KernelSU/kernel/core_hook.c
+++ b/KernelSU/kernel/core_hook.c
@@ -811,8 +811,13 @@ void __init ksu_lsm_hook_init(void)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
+	struct lsm_id lsmid;
+	lsmid.name = "ksu";
+	lsmid.id = LSM_ID_UNDEF;
+	security_add_hooks(ksu_hooks, ARRAY_SIZE(ksu_hooks), &lsmid);
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 11, 0)
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(4, 11, 0)
 	security_add_hooks(ksu_hooks, ARRAY_SIZE(ksu_hooks), "ksu");
 #else
 	// https://elixir.bootlin.com/linux/v4.10.17/source/include/linux/lsm_hooks.h#L1892
 	security_add_hooks(ksu_hooks, ARRAY_SIZE(ksu_hooks));
 #endif
 }
diff --git a/KernelSU/kernel/selinux/selinux.c b/KernelSU/kernel/selinux/selinux.c
--- a/KernelSU/kernel/selinux/selinux.c
+++ b/KernelSU/kernel/selinux/selinux.c
@@ -43,16 +43,29 @@ bool __maybe_unused is_ksu_transition(const struct task_security_struct *old_tsec,
 {
 	static u32 ksu_sid;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
+	struct lsm_context ctx;
+#else
 	char *secdata;
 	u32 seclen;
+#endif
 	bool allowed = false;
 
 	if (!ksu_sid)
 		security_secctx_to_secid("u:r:su:s0", strlen("u:r:su:s0"), &ksu_sid);
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
+	if (security_secid_to_secctx(old_tsec->sid, &ctx))
+#else
 	if (security_secid_to_secctx(old_tsec->sid, &secdata, &seclen))
+#endif
 		return false;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
+	allowed = (!strcmp("u:r:init:s0", ctx.context) && new_tsec->sid == ksu_sid);
+	security_release_secctx(&ctx);
+#else
 	allowed = (!strcmp("u:r:init:s0", secdata) && new_tsec->sid == ksu_sid);
 	security_release_secctx(secdata, seclen);
+#endif
 	return allowed;
 }
@@ -86,15 +99,28 @@ static inline u32 current_sid(void)
 
 bool is_ksu_domain()
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
+	struct lsm_context ctx;
+#else
 	char *domain;
 	u32 seclen;
+#endif
 	bool result;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
+	int err = security_secid_to_secctx(current_sid(), &ctx);
+#else
 	int err = security_secid_to_secctx(current_sid(), &domain, &seclen);
+#endif
 	if (err) {
 		return false;
 	}
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
+	result = strncmp(KERNEL_SU_DOMAIN, ctx.context, ctx.len) == 0;
+	security_release_secctx(&ctx);
+#else
 	result = strncmp(KERNEL_SU_DOMAIN, domain, seclen) == 0;
 	security_release_secctx(domain, seclen);
+#endif
 	return result;
 }
 
@@ -104,15 +130,28 @@ bool is_zygote(void *sec)
 	if (!tsec) {
 		return false;
 	}
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
+	struct lsm_context ctx;
+#else
 	char *domain;
 	u32 seclen;
+#endif
 	bool result;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
+	int err = security_secid_to_secctx(tsec->sid, &ctx);
+#else
 	int err = security_secid_to_secctx(tsec->sid, &domain, &seclen);
+#endif
 	if (err) {
 		return false;
 	}
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
+	result = strncmp("u:r:zygote:s0", ctx.context, ctx.len) == 0;
+	security_release_secctx(&ctx);
+#else
 	result = strncmp("u:r:zygote:s0", domain, seclen) == 0;
 	security_release_secctx(domain, seclen);
+#endif
 	return result;
 }
 
